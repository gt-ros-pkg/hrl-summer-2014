/* Auto-generated by genmsg_cpp for file /home/mrich7/fuerte_workspace/RYDS/srv/handler.srv */
#ifndef RYDS_SERVICE_HANDLER_H
#define RYDS_SERVICE_HANDLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace RYDS
{
template <class ContainerAllocator>
struct handlerRequest_ {
  typedef handlerRequest_<ContainerAllocator> Type;

  handlerRequest_()
  : x(0)
  {
  }

  handlerRequest_(const ContainerAllocator& _alloc)
  : x(0)
  {
  }

  typedef int64_t _x_type;
  int64_t x;


  typedef boost::shared_ptr< ::RYDS::handlerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RYDS::handlerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct handlerRequest
typedef  ::RYDS::handlerRequest_<std::allocator<void> > handlerRequest;

typedef boost::shared_ptr< ::RYDS::handlerRequest> handlerRequestPtr;
typedef boost::shared_ptr< ::RYDS::handlerRequest const> handlerRequestConstPtr;


template <class ContainerAllocator>
struct handlerResponse_ {
  typedef handlerResponse_<ContainerAllocator> Type;

  handlerResponse_()
  {
  }

  handlerResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::RYDS::handlerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RYDS::handlerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct handlerResponse
typedef  ::RYDS::handlerResponse_<std::allocator<void> > handlerResponse;

typedef boost::shared_ptr< ::RYDS::handlerResponse> handlerResponsePtr;
typedef boost::shared_ptr< ::RYDS::handlerResponse const> handlerResponseConstPtr;

struct handler
{

typedef handlerRequest Request;
typedef handlerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct handler
} // namespace RYDS

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::RYDS::handlerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::RYDS::handlerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::RYDS::handlerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b429044e1360891965aa67e074722c0e";
  }

  static const char* value(const  ::RYDS::handlerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb429044e13608919ULL;
  static const uint64_t static_value2 = 0x65aa67e074722c0eULL;
};

template<class ContainerAllocator>
struct DataType< ::RYDS::handlerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "RYDS/handlerRequest";
  }

  static const char* value(const  ::RYDS::handlerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::RYDS::handlerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 x\n\
\n\
";
  }

  static const char* value(const  ::RYDS::handlerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::RYDS::handlerRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::RYDS::handlerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::RYDS::handlerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::RYDS::handlerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::RYDS::handlerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::RYDS::handlerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "RYDS/handlerResponse";
  }

  static const char* value(const  ::RYDS::handlerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::RYDS::handlerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::RYDS::handlerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::RYDS::handlerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::RYDS::handlerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct handlerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::RYDS::handlerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct handlerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<RYDS::handler> {
  static const char* value() 
  {
    return "b429044e1360891965aa67e074722c0e";
  }

  static const char* value(const RYDS::handler&) { return value(); } 
};

template<>
struct DataType<RYDS::handler> {
  static const char* value() 
  {
    return "RYDS/handler";
  }

  static const char* value(const RYDS::handler&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<RYDS::handlerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b429044e1360891965aa67e074722c0e";
  }

  static const char* value(const RYDS::handlerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<RYDS::handlerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "RYDS/handler";
  }

  static const char* value(const RYDS::handlerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<RYDS::handlerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b429044e1360891965aa67e074722c0e";
  }

  static const char* value(const RYDS::handlerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<RYDS::handlerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "RYDS/handler";
  }

  static const char* value(const RYDS::handlerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RYDS_SERVICE_HANDLER_H

