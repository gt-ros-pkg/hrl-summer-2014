"""autogenerated by genpy from manifold_systems/ConverseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConverseRequest(genpy.Message):
  _md5sum = "2e00e0cb3b761a3f16551383fb447367"
  _type = "manifold_systems/ConverseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 a1x
float64 a1y
float64 a1z
float64 a2x
float64 a2y
float64 a2z
float64 a3x
float64 a3y
float64 a3z

"""
  __slots__ = ['a1x','a1y','a1z','a2x','a2y','a2z','a3x','a3y','a3z']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       a1x,a1y,a1z,a2x,a2y,a2z,a3x,a3y,a3z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConverseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.a1x is None:
        self.a1x = 0.
      if self.a1y is None:
        self.a1y = 0.
      if self.a1z is None:
        self.a1z = 0.
      if self.a2x is None:
        self.a2x = 0.
      if self.a2y is None:
        self.a2y = 0.
      if self.a2z is None:
        self.a2z = 0.
      if self.a3x is None:
        self.a3x = 0.
      if self.a3y is None:
        self.a3y = 0.
      if self.a3z is None:
        self.a3z = 0.
    else:
      self.a1x = 0.
      self.a1y = 0.
      self.a1z = 0.
      self.a2x = 0.
      self.a2y = 0.
      self.a2z = 0.
      self.a3x = 0.
      self.a3y = 0.
      self.a3z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.a1x, _x.a1y, _x.a1z, _x.a2x, _x.a2y, _x.a2z, _x.a3x, _x.a3y, _x.a3z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.a1x, _x.a1y, _x.a1z, _x.a2x, _x.a2y, _x.a2z, _x.a3x, _x.a3y, _x.a3z,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.a1x, _x.a1y, _x.a1z, _x.a2x, _x.a2y, _x.a2z, _x.a3x, _x.a3y, _x.a3z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.a1x, _x.a1y, _x.a1z, _x.a2x, _x.a2y, _x.a2z, _x.a3x, _x.a3y, _x.a3z,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
"""autogenerated by genpy from manifold_systems/ConverseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConverseResponse(genpy.Message):
  _md5sum = "209f516d3eb691f0663e25cb750d67c1"
  _type = "manifold_systems/ConverseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y


"""
  __slots__ = ['x','y']
  _slot_types = ['float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConverseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
    else:
      self.x = 0.
      self.y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
class Converse(object):
  _type          = 'manifold_systems/Converse'
  _md5sum = 'd55c807f317134af6b1b0dbdf90b9a40'
  _request_class  = ConverseRequest
  _response_class = ConverseResponse
