/* Auto-generated by genmsg_cpp for file /home/dave/git/hrl-summer-2014/Histogram/snapshot/srv/CompareHisto.srv */
#ifndef SNAPSHOT_SERVICE_COMPAREHISTO_H
#define SNAPSHOT_SERVICE_COMPAREHISTO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace snapshot
{
template <class ContainerAllocator>
struct CompareHistoRequest_ {
  typedef CompareHistoRequest_<ContainerAllocator> Type;

  CompareHistoRequest_()
  : C(0)
  {
  }

  CompareHistoRequest_(const ContainerAllocator& _alloc)
  : C(0)
  {
  }

  typedef int64_t _C_type;
  int64_t C;


  typedef boost::shared_ptr< ::snapshot::CompareHistoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snapshot::CompareHistoRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CompareHistoRequest
typedef  ::snapshot::CompareHistoRequest_<std::allocator<void> > CompareHistoRequest;

typedef boost::shared_ptr< ::snapshot::CompareHistoRequest> CompareHistoRequestPtr;
typedef boost::shared_ptr< ::snapshot::CompareHistoRequest const> CompareHistoRequestConstPtr;


template <class ContainerAllocator>
struct CompareHistoResponse_ {
  typedef CompareHistoResponse_<ContainerAllocator> Type;

  CompareHistoResponse_()
  : R(0)
  {
  }

  CompareHistoResponse_(const ContainerAllocator& _alloc)
  : R(0)
  {
  }

  typedef int64_t _R_type;
  int64_t R;


  typedef boost::shared_ptr< ::snapshot::CompareHistoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snapshot::CompareHistoResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CompareHistoResponse
typedef  ::snapshot::CompareHistoResponse_<std::allocator<void> > CompareHistoResponse;

typedef boost::shared_ptr< ::snapshot::CompareHistoResponse> CompareHistoResponsePtr;
typedef boost::shared_ptr< ::snapshot::CompareHistoResponse const> CompareHistoResponseConstPtr;

struct CompareHisto
{

typedef CompareHistoRequest Request;
typedef CompareHistoResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CompareHisto
} // namespace snapshot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::snapshot::CompareHistoRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::snapshot::CompareHistoRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::snapshot::CompareHistoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e275d6e57f42a0b287dbf50720ed2e12";
  }

  static const char* value(const  ::snapshot::CompareHistoRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe275d6e57f42a0b2ULL;
  static const uint64_t static_value2 = 0x87dbf50720ed2e12ULL;
};

template<class ContainerAllocator>
struct DataType< ::snapshot::CompareHistoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "snapshot/CompareHistoRequest";
  }

  static const char* value(const  ::snapshot::CompareHistoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::snapshot::CompareHistoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 C\n\
\n\
";
  }

  static const char* value(const  ::snapshot::CompareHistoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::snapshot::CompareHistoRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::snapshot::CompareHistoResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::snapshot::CompareHistoResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::snapshot::CompareHistoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7c6aa9e1cbfac25b2d393ce80f9712c8";
  }

  static const char* value(const  ::snapshot::CompareHistoResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7c6aa9e1cbfac25bULL;
  static const uint64_t static_value2 = 0x2d393ce80f9712c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::snapshot::CompareHistoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "snapshot/CompareHistoResponse";
  }

  static const char* value(const  ::snapshot::CompareHistoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::snapshot::CompareHistoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 R\n\
\n\
";
  }

  static const char* value(const  ::snapshot::CompareHistoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::snapshot::CompareHistoResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::snapshot::CompareHistoRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.C);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CompareHistoRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::snapshot::CompareHistoResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.R);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CompareHistoResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<snapshot::CompareHisto> {
  static const char* value() 
  {
    return "d2c556f88afc596e8c98cf52cd60a2a5";
  }

  static const char* value(const snapshot::CompareHisto&) { return value(); } 
};

template<>
struct DataType<snapshot::CompareHisto> {
  static const char* value() 
  {
    return "snapshot/CompareHisto";
  }

  static const char* value(const snapshot::CompareHisto&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<snapshot::CompareHistoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d2c556f88afc596e8c98cf52cd60a2a5";
  }

  static const char* value(const snapshot::CompareHistoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<snapshot::CompareHistoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "snapshot/CompareHisto";
  }

  static const char* value(const snapshot::CompareHistoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<snapshot::CompareHistoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d2c556f88afc596e8c98cf52cd60a2a5";
  }

  static const char* value(const snapshot::CompareHistoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<snapshot::CompareHistoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "snapshot/CompareHisto";
  }

  static const char* value(const snapshot::CompareHistoResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SNAPSHOT_SERVICE_COMPAREHISTO_H

