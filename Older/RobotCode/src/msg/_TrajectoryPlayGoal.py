"""autogenerated by genpy from hrl_pr2_traj_playback/TrajectoryPlayGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryPlayGoal(genpy.Message):
  _md5sum = "d6670cd32a9b1230721cddbf2f9048f4"
  _type = "hrl_pr2_traj_playback/TrajectoryPlayGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int8 MOVE_SETUP=1
int8 TRAJ_ONLY=2
int8 SETUP_AND_TRAJ=3

int8 mode
bool reverse
float32 setup_velocity
float32 traj_rate_mult
string filepath

"""
  # Pseudo-constants
  MOVE_SETUP = 1
  TRAJ_ONLY = 2
  SETUP_AND_TRAJ = 3

  __slots__ = ['mode','reverse','setup_velocity','traj_rate_mult','filepath']
  _slot_types = ['int8','bool','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,reverse,setup_velocity,traj_rate_mult,filepath

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPlayGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.reverse is None:
        self.reverse = False
      if self.setup_velocity is None:
        self.setup_velocity = 0.
      if self.traj_rate_mult is None:
        self.traj_rate_mult = 0.
      if self.filepath is None:
        self.filepath = ''
    else:
      self.mode = 0
      self.reverse = False
      self.setup_velocity = 0.
      self.traj_rate_mult = 0.
      self.filepath = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_bB2f.pack(_x.mode, _x.reverse, _x.setup_velocity, _x.traj_rate_mult))
      _x = self.filepath
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.mode, _x.reverse, _x.setup_velocity, _x.traj_rate_mult,) = _struct_bB2f.unpack(str[start:end])
      self.reverse = bool(self.reverse)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filepath = str[start:end].decode('utf-8')
      else:
        self.filepath = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_bB2f.pack(_x.mode, _x.reverse, _x.setup_velocity, _x.traj_rate_mult))
      _x = self.filepath
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.mode, _x.reverse, _x.setup_velocity, _x.traj_rate_mult,) = _struct_bB2f.unpack(str[start:end])
      self.reverse = bool(self.reverse)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filepath = str[start:end].decode('utf-8')
      else:
        self.filepath = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bB2f = struct.Struct("<bB2f")
